[
    {
        "id": "irrigation_tab",
        "type": "tab",
        "label": "ESP32 Irrigation Monitor",
        "disabled": false,
        "info": "ESP32 Irrigation Controller monitoring and data logging"
    },
    {
        "id": "mqtt_config",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "172.17.254.10",
        "port": "1883",
        "clientid": "nodered_irrigation",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "mqtt_device_config",
        "type": "mqtt in",
        "z": "irrigation_tab",
        "name": "Device Config",
        "topic": "irrigation/esp32_irrigation/config/device",
        "qos": "0",
        "datatype": "json",
        "broker": "mqtt_config",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 100,
        "wires": [["parse_device_config"]]
    },
    {
        "id": "parse_device_config",
        "type": "function",
        "z": "irrigation_tab",
        "name": "Parse Device Config",
        "func": "// Parse device configuration and prepare for database\nconst deviceConfig = msg.payload;\n\n// Store device info globally\nglobal.set('esp32_device_id', deviceConfig.device_id);\nglobal.set('esp32_ip_address', deviceConfig.ip_address);\nglobal.set('esp32_mac_address', deviceConfig.mac_address);\nglobal.set('esp32_client_id', deviceConfig.client_id);\n\n// Prepare database insert with correct parameter structure\nmsg.params = {\n    $device_id: deviceConfig.device_id,\n    $client_id: deviceConfig.client_id,\n    $ip_address: deviceConfig.ip_address,\n    $mac_address: deviceConfig.mac_address,\n    $wifi_ssid: deviceConfig.wifi_ssid,\n    $wifi_rssi: deviceConfig.wifi_rssi,\n    $heap_free: deviceConfig.heap_free,\n    $uptime: deviceConfig.uptime,\n    $firmware_version: deviceConfig.firmware_version,\n    $mqtt_broker: deviceConfig.mqtt_broker,\n    $mqtt_port: deviceConfig.mqtt_port,\n    $topic_prefix: deviceConfig.topic_prefix,\n    $timezone: deviceConfig.timezone,\n    $max_zones: deviceConfig.max_zones,\n    $timestamp: new Date().toISOString()\n};\n\nnode.status({fill:\"green\",shape:\"dot\",text:`Device: ${deviceConfig.ip_address}`});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 100,
        "wires": [["store_device_config"]]
    },
    {
        "id": "store_device_config",
        "type": "sqlite",
        "z": "irrigation_tab",
        "mydb": "irrigation_db",
        "sqlquery": "prepared",
        "sql": "INSERT OR REPLACE INTO device_config (device_id, client_id, ip_address, mac_address, wifi_ssid, wifi_rssi, heap_free, uptime, firmware_version, mqtt_broker, mqtt_port, topic_prefix, timezone, max_zones, timestamp) VALUES ($device_id, $client_id, $ip_address, $mac_address, $wifi_ssid, $wifi_rssi, $heap_free, $uptime, $firmware_version, $mqtt_broker, $mqtt_port, $topic_prefix, $timezone, $max_zones, $timestamp)",
        "name": "Store Device Config",
        "x": 540,
        "y": 100,
        "wires": [["config_stored_debug"]]
    },
    {
        "id": "mqtt_device_status",
        "type": "mqtt in",
        "z": "irrigation_tab",
        "name": "Device Status",
        "topic": "irrigation/esp32_irrigation/status/device",
        "qos": "0",
        "datatype": "json",
        "broker": "mqtt_config",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 200,
        "wires": [["parse_device_status"]]
    },
    {
        "id": "parse_device_status",
        "type": "function",
        "z": "irrigation_tab",
        "name": "Parse Device Status",
        "func": "// Parse device status and prepare for database\nconst deviceStatus = msg.payload;\n\n// Prepare database insert with correct parameter structure\nmsg.params = {\n    $device_id: global.get('esp32_device_id') || 'esp32_irrigation',\n    $status_data: JSON.stringify(deviceStatus),\n    $timestamp: new Date().toISOString()\n};\n\nnode.status({fill:\"blue\",shape:\"dot\",text:`Status updated`});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 200,
        "wires": [["store_device_status"]]
    },
    {
        "id": "store_device_status",
        "type": "sqlite",
        "z": "irrigation_tab",
        "mydb": "irrigation_db",
        "sqlquery": "prepared",
        "sql": "INSERT INTO device_status (device_id, status_data, timestamp) VALUES ($device_id, $status_data, $timestamp)",
        "name": "Store Device Status",
        "x": 540,
        "y": 200,
        "wires": [["status_stored_debug"]]
    },
    {
        "id": "mqtt_zone_status",
        "type": "mqtt in",
        "z": "irrigation_tab",
        "name": "Zone Status",
        "topic": "irrigation/esp32_irrigation/status/zone/+",
        "qos": "0",
        "datatype": "json",
        "broker": "mqtt_config",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 300,
        "wires": [["parse_zone_status"]]
    },
    {
        "id": "parse_zone_status",
        "type": "function",
        "z": "irrigation_tab",
        "name": "Parse Zone Status",
        "func": "// Extract zone number from topic\nconst topicParts = msg.topic.split('/');\nconst zoneNumber = parseInt(topicParts[topicParts.length - 1]);\n\nconst zoneStatus = msg.payload;\n\n// Prepare database insert with correct parameter structure\nmsg.params = {\n    $device_id: global.get('esp32_device_id') || 'esp32_irrigation',\n    $zone_number: zoneNumber,\n    $status: zoneStatus.status,\n    $time_remaining: zoneStatus.time_remaining || 0,\n    $timestamp: new Date().toISOString()\n};\n\nnode.status({fill:\"yellow\",shape:\"dot\",text:`Zone ${zoneNumber}: ${zoneStatus.status}`});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 300,
        "wires": [["store_zone_status"]]
    },
    {
        "id": "store_zone_status",
        "type": "sqlite",
        "z": "irrigation_tab",
        "mydb": "irrigation_db",
        "sqlquery": "prepared",
        "sql": "INSERT INTO zone_status (device_id, zone_number, status, time_remaining, timestamp) VALUES ($device_id, $zone_number, $status, $time_remaining, $timestamp)",
        "name": "Store Zone Status",
        "x": 540,
        "y": 300,
        "wires": [["zone_stored_debug"]]
    },
    {
        "id": "mqtt_schedules",
        "type": "mqtt in",
        "z": "irrigation_tab",
        "name": "Schedule Status",
        "topic": "irrigation/esp32_irrigation/status/schedules",
        "qos": "0",
        "datatype": "json",
        "broker": "mqtt_config",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 400,
        "wires": [["parse_schedule_status"]]
    },
    {
        "id": "parse_schedule_status",
        "type": "function",
        "z": "irrigation_tab",
        "name": "Parse Schedule Status",
        "func": "// Parse schedule status and prepare for database\nconst scheduleStatus = msg.payload;\n\n// Prepare database insert with correct parameter structure\nmsg.params = {\n    $device_id: global.get('esp32_device_id') || 'esp32_irrigation',\n    $schedule_data: JSON.stringify(scheduleStatus),\n    $timestamp: new Date().toISOString()\n};\n\nnode.status({fill:\"purple\",shape:\"dot\",text:`Schedules updated`});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 400,
        "wires": [["store_schedule_status"]]
    },
    {
        "id": "store_schedule_status",
        "type": "sqlite",
        "z": "irrigation_tab",
        "mydb": "irrigation_db",
        "sqlquery": "prepared",
        "sql": "INSERT INTO schedule_status (device_id, schedule_data, timestamp) VALUES ($device_id, $schedule_data, $timestamp)",
        "name": "Store Schedule Status",
        "x": 550,
        "y": 400,
        "wires": [["schedule_stored_debug"]]
    },
    {
        "id": "init_database",
        "type": "inject",
        "z": "irrigation_tab",
        "name": "Initialize Database",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 500,
        "wires": [["create_tables"]]
    },
    {
        "id": "create_tables",
        "type": "function",
        "z": "irrigation_tab",
        "name": "Create Database Tables",
        "func": "// Create tables for irrigation monitoring\nconst tables = [\n    {\n        name: \"device_config\",\n        sql: `CREATE TABLE IF NOT EXISTS device_config (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            device_id TEXT NOT NULL,\n            client_id TEXT,\n            ip_address TEXT,\n            mac_address TEXT,\n            wifi_ssid TEXT,\n            wifi_rssi INTEGER,\n            heap_free INTEGER,\n            uptime INTEGER,\n            firmware_version TEXT,\n            mqtt_broker TEXT,\n            mqtt_port INTEGER,\n            topic_prefix TEXT,\n            timezone REAL,\n            max_zones INTEGER,\n            timestamp TEXT,\n            UNIQUE(device_id)\n        )`\n    },\n    {\n        name: \"device_status\",\n        sql: `CREATE TABLE IF NOT EXISTS device_status (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            device_id TEXT NOT NULL,\n            status_data TEXT,\n            timestamp TEXT\n        )`\n    },\n    {\n        name: \"zone_status\", \n        sql: `CREATE TABLE IF NOT EXISTS zone_status (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            device_id TEXT NOT NULL,\n            zone_number INTEGER,\n            status TEXT,\n            time_remaining INTEGER,\n            timestamp TEXT\n        )`\n    },\n    {\n        name: \"schedule_status\",\n        sql: `CREATE TABLE IF NOT EXISTS schedule_status (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            device_id TEXT NOT NULL,\n            schedule_data TEXT,\n            timestamp TEXT\n        )`\n    }\n];\n\nflow.set('table_index', 0);\nflow.set('tables', tables);\n\n// Start with first table\nmsg.payload = tables[0].sql;\nmsg.table_name = tables[0].name;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 500,
        "wires": [["execute_table_creation"]]
    },
    {
        "id": "execute_table_creation",
        "type": "sqlite",
        "z": "irrigation_tab",
        "mydb": "irrigation_db",
        "sqlquery": "msg.payload",
        "sql": "",
        "name": "Execute Table Creation",
        "x": 570,
        "y": 500,
        "wires": [["next_table"]]
    },
    {
        "id": "next_table",
        "type": "function",
        "z": "irrigation_tab",
        "name": "Next Table",
        "func": "const tables = flow.get('tables');\nlet index = flow.get('table_index') + 1;\n\nif (index < tables.length) {\n    flow.set('table_index', index);\n    msg.payload = tables[index].sql;\n    msg.table_name = tables[index].name;\n    return msg;\n} else {\n    node.status({fill:\"green\",shape:\"dot\",text:\"Database initialized\"});\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 560,
        "wires": [["execute_table_creation"]]
    },
    {
        "id": "config_stored_debug",
        "type": "debug",
        "z": "irrigation_tab",
        "name": "Config Stored",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 100,
        "wires": []
    },
    {
        "id": "status_stored_debug",
        "type": "debug",
        "z": "irrigation_tab",
        "name": "Status Stored",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 200,
        "wires": []
    },
    {
        "id": "zone_stored_debug",
        "type": "debug",
        "z": "irrigation_tab",
        "name": "Zone Stored",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 300,
        "wires": []
    },
    {
        "id": "schedule_stored_debug",
        "type": "debug",
        "z": "irrigation_tab",
        "name": "Schedule Stored",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 400,
        "wires": []
    },
    {
        "id": "irrigation_db",
        "type": "sqlitedb",
        "db": "/root/.node-red/data/irrigation.db",
        "mode": "RWC"
    },
    {
        "id": "device_status_query",
        "type": "inject",
        "z": "irrigation_tab",
        "name": "Get Current Device Status",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 620,
        "wires": [["query_current_status"]]
    },
    {
        "id": "query_current_status",
        "type": "sqlite",
        "z": "irrigation_tab",
        "mydb": "irrigation_db",
        "sqlquery": "fixed",
        "sql": "SELECT dc.*, ds.status_data, ds.timestamp as last_status_update FROM device_config dc LEFT JOIN (SELECT device_id, status_data, timestamp, ROW_NUMBER() OVER (PARTITION BY device_id ORDER BY timestamp DESC) as rn FROM device_status) ds ON dc.device_id = ds.device_id AND ds.rn = 1",
        "name": "Query Current Status",
        "x": 380,
        "y": 620,
        "wires": [["format_status_response"]]
    },
    {
        "id": "format_status_response",
        "type": "function",
        "z": "irrigation_tab",
        "name": "Format Status Response",
        "func": "// Format the device status response\nif (msg.payload && msg.payload.length > 0) {\n    const device = msg.payload[0];\n    \n    msg.payload = {\n        device_info: {\n            device_id: device.device_id,\n            ip_address: device.ip_address,\n            mac_address: device.mac_address,\n            wifi_ssid: device.wifi_ssid,\n            wifi_rssi: device.wifi_rssi,\n            firmware_version: device.firmware_version,\n            timezone: device.timezone,\n            max_zones: device.max_zones,\n            last_config_update: device.timestamp\n        },\n        current_status: device.status_data ? JSON.parse(device.status_data) : null,\n        last_status_update: device.last_status_update\n    };\n} else {\n    msg.payload = {\n        error: \"No device found\"\n    };\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 620,
        "wires": [["current_status_debug"]]
    },
    {
        "id": "current_status_debug",
        "type": "debug",
        "z": "irrigation_tab",
        "name": "Current Status",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 620,
        "wires": []
    },
    {
        "id": "send_command",
        "type": "inject",
        "z": "irrigation_tab",
        "name": "Send Test Command",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "irrigation/esp32_irrigation/command/status",
        "payload": "request",
        "payloadType": "str",
        "x": 150,
        "y": 700,
        "wires": [["mqtt_command_out"]]
    },
    {
        "id": "mqtt_command_out",
        "type": "mqtt out",
        "z": "irrigation_tab",
        "name": "Send MQTT Command",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "mqtt_config",
        "x": 360,
        "y": 700,
        "wires": []
    }
]